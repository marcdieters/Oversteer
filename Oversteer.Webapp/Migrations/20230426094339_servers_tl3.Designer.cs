// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oversteer.Webapp.Data;

#nullable disable

namespace Oversteer.Webapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230426094339_servers_tl3")]
    partial class servers_tl3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Oversteer.Models.ACC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AmbientTemp")
                        .HasColumnType("int");

                    b.Property<float>("CloudLevel")
                        .HasColumnType("float");

                    b.Property<bool>("DiableAutoGear")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoClutch")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoEngineStart")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoLight")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoPitLimiter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoSteer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableAutoWiper")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableIdealLie")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MandatoryPitStopDriverChange")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MandatoryPitStopFuel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MandatoryPitStopTyres")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MandatoryPitstopCount")
                        .HasColumnType("int");

                    b.Property<int>("RaceCraftRating")
                        .HasColumnType("int");

                    b.Property<float>("Rain")
                        .HasColumnType("float");

                    b.Property<bool>("RefuelAllowedDuringRace")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RefuelTimeFixed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SafetyRating")
                        .HasColumnType("int");

                    b.Property<int>("StabilityControlLevelMax")
                        .HasColumnType("int");

                    b.Property<int>("TrackRating")
                        .HasColumnType("int");

                    b.Property<int>("WeatherRandomness")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ACC");
                });

            modelBuilder.Entity("Oversteer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DiscordId")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("GMTOffset")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("ServerAuthKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ServerKeyValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SteamId")
                        .HasColumnType("longtext");

                    b.Property<bool>("SubscribeToNewsLetter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TimezoneVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("VerifiedSteamId")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Oversteer.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CarBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CarClassId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CarBrandId");

                    b.HasIndex("CarClassId");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Oversteer.Models.CarBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CarBrands");
                });

            modelBuilder.Entity("Oversteer.Models.CarClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("CarClasses");
                });

            modelBuilder.Entity("Oversteer.Models.CarInRaceSim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccCarId")
                        .HasColumnType("int");

                    b.Property<Guid>("CarId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DlcId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DlcId");

                    b.HasIndex("RaceSimId");

                    b.ToTable("CarInRaceSims");
                });

            modelBuilder.Entity("Oversteer.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("GMTOffset")
                        .HasColumnType("float");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Oversteer.Models.Dlc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<bool>("Free")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RaceSimId");

                    b.ToTable("Dlcs");
                });

            modelBuilder.Entity("Oversteer.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Oversteer.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Oversteer.Models.FeatureInPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PlanCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PlanCategoryId");

                    b.HasIndex("PlanId");

                    b.ToTable("FeaturesInPlans");
                });

            modelBuilder.Entity("Oversteer.Models.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HttpEndPort")
                        .HasColumnType("int");

                    b.Property<int>("HttpStartPort")
                        .HasColumnType("int");

                    b.Property<Guid?>("LeagueId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Ping")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TcpEndPort")
                        .HasColumnType("int");

                    b.Property<int>("TcpStartPort")
                        .HasColumnType("int");

                    b.Property<int>("UdpEndPort")
                        .HasColumnType("int");

                    b.Property<int>("UdpStartPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Oversteer.Models.League", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AcceptNewMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPremiumMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AnonymousVisitorDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("ApproveComment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("longtext");

                    b.Property<bool>("AutoApproveNewMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BackGrounndImage")
                        .HasColumnType("longtext");

                    b.Property<string>("BannerColor")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomLiveryFileSizeLimit")
                        .HasColumnType("int");

                    b.Property<string>("DefaultServerAdminPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DiscordNewUserMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("DiscordUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderTextColor")
                        .HasColumnType("longtext");

                    b.Property<string>("LoggedInUserDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxNrOfConcurrentServers")
                        .HasColumnType("int");

                    b.Property<int>("MaxNrOfConcurrentServersConnections")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("OpenJoin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("longtext");

                    b.Property<string>("PaypalKey")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplayFilesLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("SelectedColor")
                        .HasColumnType("longtext");

                    b.Property<string>("TwitchUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("URL")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Oversteer.Models.LeagueRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NrOfUsers")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)");

                    b.Property<string>("URL")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("LeagueRegistrations");
                });

            modelBuilder.Entity("Oversteer.Models.LeagueUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("PremiumMember")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("LeagueUsers");
                });

            modelBuilder.Entity("Oversteer.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Oversteer.Models.PlanCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PlanCategorys");
                });

            modelBuilder.Entity("Oversteer.Models.RaceSim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("CurrentGameVersion")
                        .HasColumnType("double");

                    b.Property<bool>("DoesSimSupportTrackLayouts")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FilesLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RaceSims");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.CarInSplit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SplitId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("SplitId");

                    b.ToTable("CarInSplit");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Championship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ACCId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowManufacturerScoring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRegistrationAfterEventStart")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRegistrations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowTeamScoring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowWildCardRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowWildCardScoring")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BannerImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FastestLapPoints")
                        .HasColumnType("int");

                    b.Property<bool>("FollowersOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxNrOfDrivers")
                        .HasColumnType("int");

                    b.Property<int>("MaxPenaltyPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxReservesAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MaxSignOutsAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MinNrOfDrivers")
                        .HasColumnType("int");

                    b.Property<int>("MissedRacePenaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PolePositionPoints")
                        .HasColumnType("int");

                    b.Property<bool>("PrivateChampionship")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("SingleDriver")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ACCId");

                    b.HasIndex("RaceSimId");

                    b.ToTable("Championships");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.ChampionshipFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<int>("FeatureType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("ChampionshipFeature");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ChampionshipRound")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Complete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LobbyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TrackLayoutId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("ChampionshipId");

                    b.HasIndex("RaceSimId");

                    b.HasIndex("TrackId");

                    b.HasIndex("TrackLayoutId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<int>("TimeMultiplier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("ServerId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Split", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CarClassId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChampionshipId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ManuallySelectedCars")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CarClassId");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Split");
                });

            modelBuilder.Entity("Oversteer.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Lap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("char(36)");

                    b.Property<int>("DriverIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsValidForBest")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LapTime")
                        .HasColumnType("double");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ResultId");

                    b.ToTable("Laps");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Leaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("BestLap")
                        .HasColumnType("double");

                    b.Property<Guid>("CarclassId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CupCategory")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("char(36)");

                    b.Property<int>("DriverIndex")
                        .HasColumnType("int");

                    b.Property<double>("DriverTotalTimes")
                        .HasColumnType("double");

                    b.Property<int>("InGameCarId")
                        .HasColumnType("int");

                    b.Property<double>("LastLap")
                        .HasColumnType("double");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RaceNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TotalLaps")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarclassId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ResultId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsWet")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogFileRaw")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RaceId1")
                        .HasColumnType("char(36)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RaceId1");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Oversteer.Models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ACCId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CurrentSession")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilesLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HTTPPort")
                        .HasColumnType("int");

                    b.Property<Guid>("HostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PracticeServer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PreQualyRulesApply")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartedWhen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TCPPort")
                        .HasColumnType("int");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TrackLayoutId")
                        .HasColumnType("char(36)");

                    b.Property<int>("UDPPort")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ACCId");

                    b.HasIndex("HostId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("RaceId");

                    b.HasIndex("RaceSimId");

                    b.HasIndex("TrackId");

                    b.HasIndex("TrackLayoutId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Oversteer.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SceneryImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Oversteer.Models.TrackInRaceSim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<int?>("DlcId")
                        .HasColumnType("int");

                    b.Property<Guid?>("DlcId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DlcId1");

                    b.HasIndex("RaceSimId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackInRaceSims");
                });

            modelBuilder.Entity("Oversteer.Models.TrackLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("DataFile")
                        .HasColumnType("longblob");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSeperateContent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LayoutImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Pitboxes")
                        .HasColumnType("int");

                    b.Property<int>("PrivateServerSlots")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceSimId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RaceSimId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackLayouts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Oversteer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Oversteer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Oversteer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Oversteer.Models.ApplicationUser", b =>
                {
                    b.HasOne("Oversteer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Oversteer.Models.Car", b =>
                {
                    b.HasOne("Oversteer.Models.CarBrand", "CarBrand")
                        .WithMany()
                        .HasForeignKey("CarBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.CarClass", "CarClass")
                        .WithMany("Cars")
                        .HasForeignKey("CarClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Racing.Championship", null)
                        .WithMany("Cars")
                        .HasForeignKey("ChampionshipId");

                    b.Navigation("CarBrand");

                    b.Navigation("CarClass");
                });

            modelBuilder.Entity("Oversteer.Models.CarBrand", b =>
                {
                    b.HasOne("Oversteer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Oversteer.Models.CarClass", b =>
                {
                    b.HasOne("Oversteer.Models.Racing.Championship", null)
                        .WithMany("CarClasses")
                        .HasForeignKey("ChampionshipId");
                });

            modelBuilder.Entity("Oversteer.Models.CarInRaceSim", b =>
                {
                    b.HasOne("Oversteer.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Dlc", "Dlc")
                        .WithMany()
                        .HasForeignKey("DlcId");

                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Dlc");

                    b.Navigation("RaceSim");
                });

            modelBuilder.Entity("Oversteer.Models.Dlc", b =>
                {
                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceSim");
                });

            modelBuilder.Entity("Oversteer.Models.FeatureInPlan", b =>
                {
                    b.HasOne("Oversteer.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.PlanCategory", "PlanCategory")
                        .WithMany()
                        .HasForeignKey("PlanCategoryId");

                    b.HasOne("Oversteer.Models.Plan", "Plan")
                        .WithMany("Features")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Plan");

                    b.Navigation("PlanCategory");
                });

            modelBuilder.Entity("Oversteer.Models.Host", b =>
                {
                    b.HasOne("Oversteer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Oversteer.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId");

                    b.Navigation("Country");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Oversteer.Models.LeagueRegistration", b =>
                {
                    b.HasOne("Oversteer.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Oversteer.Models.LeagueUser", b =>
                {
                    b.HasOne("Oversteer.Models.League", "League")
                        .WithMany("LeagueUsers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.CarInSplit", b =>
                {
                    b.HasOne("Oversteer.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Racing.Split", "Split")
                        .WithMany("CarsInSplit")
                        .HasForeignKey("SplitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Split");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Championship", b =>
                {
                    b.HasOne("Oversteer.Models.ACC", "ACC")
                        .WithMany()
                        .HasForeignKey("ACCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ACC");

                    b.Navigation("RaceSim");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.ChampionshipFeature", b =>
                {
                    b.HasOne("Oversteer.Models.Racing.Championship", null)
                        .WithMany("ChampionshipFeatures")
                        .HasForeignKey("ChampionshipId");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Point", b =>
                {
                    b.HasOne("Oversteer.Models.Racing.Championship", null)
                        .WithMany("Points")
                        .HasForeignKey("ChampionshipId");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Race", b =>
                {
                    b.HasOne("Oversteer.Models.ACC", "Acc")
                        .WithMany()
                        .HasForeignKey("AccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Racing.Championship", "Championship")
                        .WithMany("Races")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.TrackLayout", "TrackLayout")
                        .WithMany()
                        .HasForeignKey("TrackLayoutId");

                    b.Navigation("Acc");

                    b.Navigation("Championship");

                    b.Navigation("RaceSim");

                    b.Navigation("Track");

                    b.Navigation("TrackLayout");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Session", b =>
                {
                    b.HasOne("Oversteer.Models.Racing.Race", null)
                        .WithMany("Sessions")
                        .HasForeignKey("RaceId");

                    b.HasOne("Oversteer.Models.Server", null)
                        .WithMany("Sessions")
                        .HasForeignKey("ServerId");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Split", b =>
                {
                    b.HasOne("Oversteer.Models.CarClass", "CarClass")
                        .WithMany()
                        .HasForeignKey("CarClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Racing.Championship", null)
                        .WithMany("Splits")
                        .HasForeignKey("ChampionshipId");

                    b.Navigation("CarClass");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Lap", b =>
                {
                    b.HasOne("Oversteer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Result.Result", "Result")
                        .WithMany("Laps")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Leaderboard", b =>
                {
                    b.HasOne("Oversteer.Models.CarClass", "CarClass")
                        .WithMany()
                        .HasForeignKey("CarclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Result.Result", "Result")
                        .WithMany("Leaderboard")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarClass");

                    b.Navigation("Driver");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Result", b =>
                {
                    b.HasOne("Oversteer.Models.Racing.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId1");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Oversteer.Models.Server", b =>
                {
                    b.HasOne("Oversteer.Models.ACC", "ACC")
                        .WithMany()
                        .HasForeignKey("ACCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Host", "Host")
                        .WithMany("Servers")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Racing.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.TrackLayout", "TrackLayout")
                        .WithMany()
                        .HasForeignKey("TrackLayoutId");

                    b.Navigation("ACC");

                    b.Navigation("Host");

                    b.Navigation("League");

                    b.Navigation("Race");

                    b.Navigation("RaceSim");

                    b.Navigation("Track");

                    b.Navigation("TrackLayout");
                });

            modelBuilder.Entity("Oversteer.Models.Track", b =>
                {
                    b.HasOne("Oversteer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Oversteer.Models.TrackInRaceSim", b =>
                {
                    b.HasOne("Oversteer.Models.Dlc", "Dlc")
                        .WithMany()
                        .HasForeignKey("DlcId1");

                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Track", "Track")
                        .WithMany("TrackInRaceSims")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dlc");

                    b.Navigation("RaceSim");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Oversteer.Models.TrackLayout", b =>
                {
                    b.HasOne("Oversteer.Models.RaceSim", "RaceSim")
                        .WithMany()
                        .HasForeignKey("RaceSimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oversteer.Models.Track", "Track")
                        .WithMany("TrackLayouts")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceSim");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Oversteer.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Oversteer.Models.Host", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Oversteer.Models.League", b =>
                {
                    b.Navigation("LeagueUsers");
                });

            modelBuilder.Entity("Oversteer.Models.Plan", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Championship", b =>
                {
                    b.Navigation("CarClasses");

                    b.Navigation("Cars");

                    b.Navigation("ChampionshipFeatures");

                    b.Navigation("Points");

                    b.Navigation("Races");

                    b.Navigation("Splits");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Race", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Oversteer.Models.Racing.Split", b =>
                {
                    b.Navigation("CarsInSplit");
                });

            modelBuilder.Entity("Oversteer.Models.Result.Result", b =>
                {
                    b.Navigation("Laps");

                    b.Navigation("Leaderboard");
                });

            modelBuilder.Entity("Oversteer.Models.Server", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Oversteer.Models.Track", b =>
                {
                    b.Navigation("TrackInRaceSims");

                    b.Navigation("TrackLayouts");
                });
#pragma warning restore 612, 618
        }
    }
}
